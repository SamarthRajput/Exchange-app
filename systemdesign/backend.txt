A very bad exchange would not have, In memory orderbooks, they would just store the orderbooks in a database 
If any request comes to your backend of type /api/v1/order, ki i want to place an order, if it reaches the database, then your orderbook is going to be extermely slow
if every order that is coming is reaching some storage, then no market maker would trade on our exchange because it will take a every long time for them recieve an acknowledgment, ki han your order has been placed, if we store all our order in a database
Most request that comes in an exchange comes for either order placement on the book , or order cancellation on the book

Engine is the core central server, which is maintaining users balances and all the orderbooks.
At some point the engine needs to be either bunch of servers, or at the very least multiple nodejs processes or multiple rust threads or multiple java threads 

We have to make sure all the orders are happening sequentially, if all the orders are happening parallely, then we have concurrency issue 
The engine will create the orderbook as well, the in memory orderbook and if there are matches, it will ofcourse swap the assests across to users, it will also maintain the users balances 
If the engine ever goes down, we can recreate the state from genesis, from the beginning of an exchange, we can just run through the queue again and recreate the state on this engine

The better way to recreate state, is that you keep snapshotting from time to time store the snapshot somewhere, and when ever the engines goes down, whenever it comes backup
takes the latest snapshot, and whatever events happened since the snapshot, you can just use those events to recreate the final state 

If someone is working at Paytm and have database access, he/ she they can change the backend or balances, which is why we have multiple engines running, thats why restrict developer access 
We have mulitple engines running, they all doing the same thing, they all pulling from the same queue one by one and processing all the messages, and in the end they all should arrive at the same state 
and if they dont that is when you know something weird has happened in our system

A better way for backend systems to talk to each other is through systems like either through a queue or through a pubsub (publisher subscriber)
Whenever we send a request, it goes on to a queue, gets proccesed by the engine, engine sends it back to the pubsub, you get back response from the pub sub 
and then you return it back to the user 
We can totally get rid of this pubsub  and our exchange doesnot support immediate response, you give us an order, we will later on tell you, you can keep polling for the response, we dont immediate return you how much of your order is filled 
then the api and engine dont need to talk to each other 
But if we want to build something like binance or want to build an architecture where the user immediate gets back how much of there order was placed and what were the fills that actually happened, then the engine needs to talk to the API and using pubsub engine can to the api  

The engine needs to publish to another pubsub, ki yaar depth has changed at SOL_USDC, these bids and asks have changed and ofc there needs to be a websocket server, that the ends users connects to 
We also connects to a websocket server that gives us real time updates, we send a subscribe message, if the user unsubscribe you have to also unsubscribe

The class that is managing the subscription to the pubsub is called the Subscription Manager class 
When the first user asked for the market, that's when we subscribe to the market on the pubsub 
When the last user leaves from the market, thats when we unsubscribe from the market on the pubsub 
All the trades and klines are stored in database

The function sendAndAwait is send a message to the engine and await for a response from the engine, whenever the engine processes this message, it will return us back a response so sendAndAwait for that message
Whenever you do an await on any function that means the return type of the function is promise 

The sum function takes 2 numbers as an input, returns a number 
function sum (a: number, b: number): number {
    return a + b;
}

But what if this function was an async function, if it is an async function, the return type is not a number any more, the return type is a promise of type number 
So whenever you have a function, on which you are awaiting on, it is returning you a promise only 
async function sum (a: number, b: number ): Promise<number> {
    return a + b;
}

Whenever you create a promise, it takes an 1 argument as an input, which is a function 
Whenever we are placing an order, it gives us 2 options 
1. IOC means immediate or cancel, if we select IOC and place an order, then it will either fulfill your order completely or it will cancel your order completely
it will not partially put it on order book 
2. Post Only, ki i want my order to posted on the orderbook, i dont want it to be matched immediately, i never wanted to be the taker, i wanted to be the maker 


Running backend locally
1. go to docker folder ->  cd backend/docker
run the command -> docker compose up 
this is will start the time series db and redis locally

2. go the api server -> cd backend/api 
run the commands -> npm i 
-> npm run dev 
that will start our api server 

3. go to the engine folder -> cd/backend/ engine
run the command -> npm run dev 
this will start our engine 

4. go to the websocket server -> cd backend/ws 
run the command -> npm run dev
this will start our websocket server

5. go to the market maker folder -> cd backend/mm 
run the command -> npm run dev
the orderbook will get populated, repopulate

The websocket module of the exchange, it been written in a scalable way and all of this logic can be as it used to build any realtime application 
But if we want to create a multiplayer game, gather town, chess in all of these cases you would want to build a very similar architecture and this architecture did use pub sub 

Singleton pattern ensures, through out your app only a single time, the logic runs, no more instances should be created throughout the app 
Singleton pattern ensures it by creating a private constructor
We create a static function called getInstance(), that creates a static variable/attribute called instance, the static instance is also directly connected to UserManager

One thing about websocket servers is, you should avoid upscaling, downscaling very quickly.